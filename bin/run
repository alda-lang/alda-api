#!/usr/bin/env bash

set -eo pipefail

# Optional. Defaults to 8080.
port="${1-8080}"

# Optional.
# When present, metrics are sent with the env (e.g. "prod") as a tag.
# When absent, no metrics are sent.
env="$2"

# Configure Datadog agent, using the step-by-step Debian instructions here:
#
# https://app.datadoghq.com/signup/agent#debian

if [[ -z "$DD_API_KEY" ]]; then
  echo "ERROR - DD_API_KEY not set."
  exit 1
fi

datadog_config="/etc/datadog-agent/datadog.yaml"
datadog_example_config="/etc/datadog-agent/datadog.yaml.example"

if ! [[ -f "$datadog_config" ]]; then
  echo "*** Copying $datadog_example_config => $datadog_config ***"
  cp "$datadog_example_config" "$datadog_config"
fi

echo "*** Replacing site and api_key in $datadog_config ***"

sed -i \
  -e 's/# site:.*/site: datadoghq.com/' \
  -e "s/api_key:.*/api_key: $DD_API_KEY/" \
  "$datadog_config"

# service wrapper
if command -v service >/dev/null; then
  start_datadog_agent="service datadog-agent restart"
# systemd
elif command -v systemctl >/dev/null; then
  start_datadog_agent="systemctl restart datadog-agent.service"
# upstart
else
  start_datadog_agent="start datadog-agent"
fi

if ! $start_datadog_agent; then
  cat <<EOF
---
2020-12-24 Dave: I've seen the message "Starting Datadog Agent: datadog-agent
failed!" printed here, however metrics then start arriving in Datadog. So, I
think it's OK to assume it's working and continue.
---
EOF
fi

# Serve the app.
cd "$(dirname "$0")/../"
echo "Current directory: $PWD"
echo "Serving app (port: $port, env: $env)"
clojure -M:serve "$port" "$env"

echo "Done serving. Exiting."
